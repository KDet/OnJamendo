//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace OnJamendo
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::OnJamendo.OnJamendo_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace OnJamendo.OnJamendo_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_Downloader() { return new global::OnJamendo.Controls.Downloader(); }

        private object Activate_2_Track() { return new global::OnJamendo.Model.Track(); }

        private object Activate_3_MusicItem() { return new global::OnJamendo.Model.MusicItem(); }

        private object Activate_5_TimeSpanToDoubleConverter() { return new global::OnJamendo.Common.Converters.TimeSpanToDoubleConverter(); }

        private object Activate_6_Player() { return new global::OnJamendo.Controls.Player(); }

        private object Activate_7_IntegerToTimeSpanStringConverter() { return new global::OnJamendo.Common.Converters.IntegerToTimeSpanStringConverter(); }

        private object Activate_8_CountToStringConverter() { return new global::OnJamendo.Common.Converters.CountToStringConverter(); }

        private object Activate_9_BaseView() { return new global::OnJamendo.View.BaseView(); }

        private object Activate_10_LayoutAwarePage() { return new global::OnJamendo.Common.LayoutAwarePage(); }

        private object Activate_11_TrackBitmapSourceConverter() { return new global::OnJamendo.Common.Converters.TrackBitmapSourceConverter(); }

        private object Activate_12_PlayerPageViewModel() { return new global::OnJamendo.ViewModel.PlayerPageViewModel(); }

        private object Activate_13_BaseViewModel() { return new global::OnJamendo.ViewModel.BaseViewModel(); }

        private object Activate_14_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Track>(); }

        private object Activate_15_Collection() { return new global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.Track>(); }

        private object Activate_16_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.DownloadTrack>(); }

        private object Activate_17_Collection() { return new global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.DownloadTrack>(); }

        private object Activate_18_DownloadTrack() { return new global::OnJamendo.Model.DownloadTrack(); }

        private object Activate_21_DownloadService() { return new global::OnJamendo.Service.DownloadService(); }

        private object Activate_24_PlayerPage() { return new global::OnJamendo.View.PlayerPage(); }

        private object Activate_25_MainPageViewModel() { return new global::OnJamendo.ViewModel.MainPageViewModel(); }

        private object Activate_26_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Album>(); }

        private object Activate_27_Collection() { return new global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.Album>(); }

        private object Activate_28_Album() { return new global::OnJamendo.Model.Album(); }

        private object Activate_29_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.PlayList>(); }

        private object Activate_30_Collection() { return new global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.PlayList>(); }

        private object Activate_31_PlayList() { return new global::OnJamendo.Model.PlayList(); }

        private object Activate_35_MainPage() { return new global::OnJamendo.View.MainPage(); }

        private void VectorAdd_1_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.Track>)instance;
            var newItem = (global::OnJamendo.Model.Track)item;
            collection.Add(newItem);
        }

        private void VectorAdd_14_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.Track>)instance;
            var newItem = (global::OnJamendo.Model.Track)item;
            collection.Add(newItem);
        }

        private void VectorAdd_15_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.Track>)instance;
            var newItem = (global::OnJamendo.Model.Track)item;
            collection.Add(newItem);
        }

        private void VectorAdd_16_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.DownloadTrack>)instance;
            var newItem = (global::OnJamendo.Model.DownloadTrack)item;
            collection.Add(newItem);
        }

        private void VectorAdd_17_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.DownloadTrack>)instance;
            var newItem = (global::OnJamendo.Model.DownloadTrack)item;
            collection.Add(newItem);
        }

        private void VectorAdd_26_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.Album>)instance;
            var newItem = (global::OnJamendo.Model.Album)item;
            collection.Add(newItem);
        }

        private void VectorAdd_27_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.Album>)instance;
            var newItem = (global::OnJamendo.Model.Album)item;
            collection.Add(newItem);
        }

        private void VectorAdd_29_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.PlayList>)instance;
            var newItem = (global::OnJamendo.Model.PlayList)item;
            collection.Add(newItem);
        }

        private void VectorAdd_30_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OnJamendo.Model.PlayList>)instance;
            var newItem = (global::OnJamendo.Model.PlayList)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Int32":
                xamlType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "UInt64":
                xamlType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.UInt64));
                break;

            case "Boolean":
                xamlType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "OnJamendo.Controls.Downloader":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Controls.Downloader), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_Downloader;
                userType.AddMemberName("DownloadList");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::OnJamendo.Model.Track>),
                                                   "System.Collections.Generic.IList<OnJamendo.Model.Track>");
                xamlType = userType;
                break;

            case "System.Collections.Generic.IList<OnJamendo.Model.Track>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IList<global::OnJamendo.Model.Track>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::OnJamendo.Model.Track>),
                                                   "System.Collections.Generic.IList<OnJamendo.Model.Track>");
                userType.CollectionAdd = VectorAdd_1_IList;
                xamlType = userType;
                break;

            case "OnJamendo.Model.Track":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Model.Track), GetXamlTypeByName("OnJamendo.Model.MusicItem"));
                userType.Activator = Activate_2_Track;
                userType.AddMemberName("Album_Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Album_Image");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Artist_Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Stream");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TrackCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "OnJamendo.Model.MusicItem":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Model.MusicItem), GetXamlTypeByName("OnJamendo.Common.BindableBase"));
                userType.Activator = Activate_3_MusicItem;
                userType.AddMemberName("Id");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Image");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Duration");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Url");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TrackCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "OnJamendo.Common.BindableBase":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.BindableBase), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "OnJamendo.Common.Converters.TimeSpanToDoubleConverter":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.Converters.TimeSpanToDoubleConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_TimeSpanToDoubleConverter;
                xamlType = userType;
                break;

            case "OnJamendo.Controls.Player":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Controls.Player), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_6_Player;
                userType.AddMemberName("Track");
                userType.AddMemberName("PlayListSource");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::OnJamendo.Model.Track>),
                                                   "System.Collections.Generic.IList<OnJamendo.Model.Track>");
                userType.AddMemberName("PlayListIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "OnJamendo.Common.Converters.IntegerToTimeSpanStringConverter":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.Converters.IntegerToTimeSpanStringConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_IntegerToTimeSpanStringConverter;
                xamlType = userType;
                break;

            case "OnJamendo.Common.Converters.CountToStringConverter":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.Converters.CountToStringConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_CountToStringConverter;
                xamlType = userType;
                break;

            case "OnJamendo.View.BaseView":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.View.BaseView), GetXamlTypeByName("OnJamendo.Common.LayoutAwarePage"));
                userType.Activator = Activate_9_BaseView;
                userType.AddMemberName("DataContextChangedWatcher");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "OnJamendo.Common.LayoutAwarePage":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_LayoutAwarePage;
                xamlType = userType;
                break;

            case "OnJamendo.Common.Converters.TrackBitmapSourceConverter":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.Converters.TrackBitmapSourceConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_TrackBitmapSourceConverter;
                xamlType = userType;
                break;

            case "OnJamendo.ViewModel.PlayerPageViewModel":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.ViewModel.PlayerPageViewModel), GetXamlTypeByName("OnJamendo.ViewModel.BaseViewModel"));
                userType.Activator = Activate_12_PlayerPageViewModel;
                userType.AddMemberName("AllTracks");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Track>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Track>");
                userType.AddMemberName("DownloadTracks");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.DownloadTrack>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.DownloadTrack>");
                userType.AddMemberName("CurrentTrack");
                userType.AddMemberName("DownloadTrack");
                AddToMapOfTypeToStandardName(typeof(global::OnJamendo.Common.RelayCommand<global::OnJamendo.Model.Track>),
                                                   "OnJamendo.Common.RelayCommand<OnJamendo.Model.Track>");
                userType.AddMemberName("TrackDownloadService");
                xamlType = userType;
                break;

            case "OnJamendo.ViewModel.BaseViewModel":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.ViewModel.BaseViewModel), GetXamlTypeByName("OnJamendo.Common.BindableBase"));
                userType.Activator = Activate_13_BaseViewModel;
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("CanGoBack");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanGoForward");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("RefreshPage");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Track>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Track>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<OnJamendo.Model.Track>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Track>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Track>");
                userType.Activator = Activate_14_ObservableCollection;
                userType.CollectionAdd = VectorAdd_14_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<OnJamendo.Model.Track>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.Track>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.Track>),
                                                   "System.Collections.ObjectModel.Collection<OnJamendo.Model.Track>");
                userType.Activator = Activate_15_Collection;
                userType.CollectionAdd = VectorAdd_15_Collection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.DownloadTrack>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.DownloadTrack>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<OnJamendo.Model.DownloadTrack>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.DownloadTrack>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.DownloadTrack>");
                userType.Activator = Activate_16_ObservableCollection;
                userType.CollectionAdd = VectorAdd_16_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<OnJamendo.Model.DownloadTrack>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.DownloadTrack>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.DownloadTrack>),
                                                   "System.Collections.ObjectModel.Collection<OnJamendo.Model.DownloadTrack>");
                userType.Activator = Activate_17_Collection;
                userType.CollectionAdd = VectorAdd_17_Collection;
                xamlType = userType;
                break;

            case "OnJamendo.Model.DownloadTrack":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Model.DownloadTrack), GetXamlTypeByName("OnJamendo.Model.Track"));
                userType.Activator = Activate_18_DownloadTrack;
                userType.AddMemberName("TotalBytesToRecive");
                AddToMapOfTypeToStandardName(typeof(global::System.UInt64),
                                                   "UInt64");
                userType.AddMemberName("RecivedBytes");
                AddToMapOfTypeToStandardName(typeof(global::System.UInt64),
                                                   "UInt64");
                userType.AddMemberName("StorageFile");
                xamlType = userType;
                break;

            case "Windows.Storage.StorageFile":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Storage.StorageFile), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "OnJamendo.Common.RelayCommand<OnJamendo.Model.Track>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.RelayCommand<global::OnJamendo.Model.Track>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::OnJamendo.Common.RelayCommand<global::OnJamendo.Model.Track>),
                                                   "OnJamendo.Common.RelayCommand<OnJamendo.Model.Track>");
                xamlType = userType;
                break;

            case "OnJamendo.Service.DownloadService":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Service.DownloadService), GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_DownloadService;
                xamlType = userType;
                break;

            case "OnJamendo.Service.INavigationService":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Service.INavigationService), null);
                xamlType = userType;
                break;

            case "OnJamendo.Common.RelayCommand":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.RelayCommand), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "OnJamendo.View.PlayerPage":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.View.PlayerPage), GetXamlTypeByName("OnJamendo.View.BaseView"));
                userType.Activator = Activate_24_PlayerPage;
                xamlType = userType;
                break;

            case "OnJamendo.ViewModel.MainPageViewModel":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.ViewModel.MainPageViewModel), GetXamlTypeByName("OnJamendo.ViewModel.BaseViewModel"));
                userType.Activator = Activate_25_MainPageViewModel;
                userType.AddMemberName("TopTracks");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Track>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Track>");
                userType.AddMemberName("TopAlbums");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Album>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Album>");
                userType.AddMemberName("TopPlayLists");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.PlayList>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.PlayList>");
                userType.AddMemberName("TrackSelectedCommand");
                AddToMapOfTypeToStandardName(typeof(global::OnJamendo.Common.RelayCommand<global::OnJamendo.Model.MusicItem>),
                                                   "OnJamendo.Common.RelayCommand<OnJamendo.Model.MusicItem>");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Album>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Album>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<OnJamendo.Model.Album>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Album>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Album>");
                userType.Activator = Activate_26_ObservableCollection;
                userType.CollectionAdd = VectorAdd_26_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<OnJamendo.Model.Album>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.Album>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.Album>),
                                                   "System.Collections.ObjectModel.Collection<OnJamendo.Model.Album>");
                userType.Activator = Activate_27_Collection;
                userType.CollectionAdd = VectorAdd_27_Collection;
                xamlType = userType;
                break;

            case "OnJamendo.Model.Album":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Model.Album), GetXamlTypeByName("OnJamendo.Model.MusicItem"));
                userType.Activator = Activate_28_Album;
                userType.AddMemberName("Artist_Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Genre");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.PlayList>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.PlayList>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<OnJamendo.Model.PlayList>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.PlayList>),
                                                   "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.PlayList>");
                userType.Activator = Activate_29_ObservableCollection;
                userType.CollectionAdd = VectorAdd_29_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<OnJamendo.Model.PlayList>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.PlayList>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::OnJamendo.Model.PlayList>),
                                                   "System.Collections.ObjectModel.Collection<OnJamendo.Model.PlayList>");
                userType.Activator = Activate_30_Collection;
                userType.CollectionAdd = VectorAdd_30_Collection;
                xamlType = userType;
                break;

            case "OnJamendo.Model.PlayList":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Model.PlayList), GetXamlTypeByName("OnJamendo.Model.MusicItem"));
                userType.Activator = Activate_31_PlayList;
                xamlType = userType;
                break;

            case "OnJamendo.Common.RelayCommand<OnJamendo.Model.MusicItem>":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.RelayCommand<global::OnJamendo.Model.MusicItem>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::OnJamendo.Common.RelayCommand<global::OnJamendo.Model.MusicItem>),
                                                   "OnJamendo.Common.RelayCommand<OnJamendo.Model.MusicItem>");
                xamlType = userType;
                break;

            case "OnJamendo.Common.ItemClickCommandBehavior":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.Common.ItemClickCommandBehavior), GetXamlTypeByName("Object"));
                userType.AddMemberName("Command");
                xamlType = userType;
                break;

            case "System.Windows.Input.ICommand":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Windows.Input.ICommand), null);
                xamlType = userType;
                break;

            case "OnJamendo.View.MainPage":
                userType = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OnJamendo.View.MainPage), GetXamlTypeByName("OnJamendo.View.BaseView"));
                userType.Activator = Activate_35_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_Downloader_DownloadList(object instance)
        {
            var that = (global::OnJamendo.Controls.Downloader)instance;
            return that.DownloadList;
        }
        private void set_0_Downloader_DownloadList(object instance, object Value)
        {
            var that = (global::OnJamendo.Controls.Downloader)instance;
            that.DownloadList = (global::System.Collections.Generic.IList<global::OnJamendo.Model.Track>)Value;
        }
        private object get_1_Track_Album_Name(object instance)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            return that.Album_Name;
        }
        private void set_1_Track_Album_Name(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            that.Album_Name = (global::System.String)Value;
        }
        private object get_2_Track_Album_Image(object instance)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            return that.Album_Image;
        }
        private void set_2_Track_Album_Image(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            that.Album_Image = (global::System.String)Value;
        }
        private object get_3_Track_Artist_Name(object instance)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            return that.Artist_Name;
        }
        private void set_3_Track_Artist_Name(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            that.Artist_Name = (global::System.String)Value;
        }
        private object get_4_Track_Text(object instance)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            return that.Text;
        }
        private void set_4_Track_Text(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_5_Track_Stream(object instance)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            return that.Stream;
        }
        private void set_5_Track_Stream(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            that.Stream = (global::System.String)Value;
        }
        private object get_6_Track_TrackCount(object instance)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            return that.TrackCount;
        }
        private void set_6_Track_TrackCount(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.Track)instance;
            that.TrackCount = (global::System.Int32)Value;
        }
        private object get_7_MusicItem_Id(object instance)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            return that.Id;
        }
        private void set_7_MusicItem_Id(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            that.Id = (global::System.Int32)Value;
        }
        private object get_8_MusicItem_Name(object instance)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            return that.Name;
        }
        private void set_8_MusicItem_Name(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_9_MusicItem_Image(object instance)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            return that.Image;
        }
        private void set_9_MusicItem_Image(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            that.Image = (global::System.String)Value;
        }
        private object get_10_MusicItem_Duration(object instance)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            return that.Duration;
        }
        private void set_10_MusicItem_Duration(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            that.Duration = (global::System.Int32)Value;
        }
        private object get_11_MusicItem_Url(object instance)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            return that.Url;
        }
        private void set_11_MusicItem_Url(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            that.Url = (global::System.String)Value;
        }
        private object get_12_Player_Track(object instance)
        {
            var that = (global::OnJamendo.Controls.Player)instance;
            return that.Track;
        }
        private void set_12_Player_Track(object instance, object Value)
        {
            var that = (global::OnJamendo.Controls.Player)instance;
            that.Track = (global::OnJamendo.Model.Track)Value;
        }
        private object get_13_Player_PlayListSource(object instance)
        {
            var that = (global::OnJamendo.Controls.Player)instance;
            return that.PlayListSource;
        }
        private void set_13_Player_PlayListSource(object instance, object Value)
        {
            var that = (global::OnJamendo.Controls.Player)instance;
            that.PlayListSource = (global::System.Collections.Generic.IList<global::OnJamendo.Model.Track>)Value;
        }
        private object get_14_Player_PlayListIndex(object instance)
        {
            var that = (global::OnJamendo.Controls.Player)instance;
            return that.PlayListIndex;
        }
        private void set_14_Player_PlayListIndex(object instance, object Value)
        {
            var that = (global::OnJamendo.Controls.Player)instance;
            that.PlayListIndex = (global::System.Int32)Value;
        }
        private object get_15_BaseView_DataContextChangedWatcher(object instance)
        {
            var that = (global::OnJamendo.View.BaseView)instance;
            return that.DataContextChangedWatcher;
        }
        private void set_15_BaseView_DataContextChangedWatcher(object instance, object Value)
        {
            var that = (global::OnJamendo.View.BaseView)instance;
            that.DataContextChangedWatcher = (global::System.Object)Value;
        }
        private object get_16_PlayerPageViewModel_AllTracks(object instance)
        {
            var that = (global::OnJamendo.ViewModel.PlayerPageViewModel)instance;
            return that.AllTracks;
        }
        private void set_16_PlayerPageViewModel_AllTracks(object instance, object Value)
        {
            var that = (global::OnJamendo.ViewModel.PlayerPageViewModel)instance;
            that.AllTracks = (global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Track>)Value;
        }
        private object get_17_PlayerPageViewModel_DownloadTracks(object instance)
        {
            var that = (global::OnJamendo.ViewModel.PlayerPageViewModel)instance;
            return that.DownloadTracks;
        }
        private void set_17_PlayerPageViewModel_DownloadTracks(object instance, object Value)
        {
            var that = (global::OnJamendo.ViewModel.PlayerPageViewModel)instance;
            that.DownloadTracks = (global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.DownloadTrack>)Value;
        }
        private object get_18_DownloadTrack_TotalBytesToRecive(object instance)
        {
            var that = (global::OnJamendo.Model.DownloadTrack)instance;
            return that.TotalBytesToRecive;
        }
        private void set_18_DownloadTrack_TotalBytesToRecive(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.DownloadTrack)instance;
            that.TotalBytesToRecive = (global::System.UInt64)Value;
        }
        private object get_19_DownloadTrack_RecivedBytes(object instance)
        {
            var that = (global::OnJamendo.Model.DownloadTrack)instance;
            return that.RecivedBytes;
        }
        private void set_19_DownloadTrack_RecivedBytes(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.DownloadTrack)instance;
            that.RecivedBytes = (global::System.UInt64)Value;
        }
        private object get_20_DownloadTrack_StorageFile(object instance)
        {
            var that = (global::OnJamendo.Model.DownloadTrack)instance;
            return that.StorageFile;
        }
        private void set_20_DownloadTrack_StorageFile(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.DownloadTrack)instance;
            that.StorageFile = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_21_PlayerPageViewModel_CurrentTrack(object instance)
        {
            var that = (global::OnJamendo.ViewModel.PlayerPageViewModel)instance;
            return that.CurrentTrack;
        }
        private void set_21_PlayerPageViewModel_CurrentTrack(object instance, object Value)
        {
            var that = (global::OnJamendo.ViewModel.PlayerPageViewModel)instance;
            that.CurrentTrack = (global::OnJamendo.Model.Track)Value;
        }
        private object get_22_PlayerPageViewModel_DownloadTrack(object instance)
        {
            var that = (global::OnJamendo.ViewModel.PlayerPageViewModel)instance;
            return that.DownloadTrack;
        }
        private object get_23_PlayerPageViewModel_TrackDownloadService(object instance)
        {
            var that = (global::OnJamendo.ViewModel.PlayerPageViewModel)instance;
            return that.TrackDownloadService;
        }
        private object get_24_BaseViewModel_NavigationService(object instance)
        {
            var that = (global::OnJamendo.ViewModel.BaseViewModel)instance;
            return that.NavigationService;
        }
        private void set_24_BaseViewModel_NavigationService(object instance, object Value)
        {
            var that = (global::OnJamendo.ViewModel.BaseViewModel)instance;
            that.NavigationService = (global::OnJamendo.Service.INavigationService)Value;
        }
        private object get_25_BaseViewModel_CanGoBack(object instance)
        {
            var that = (global::OnJamendo.ViewModel.BaseViewModel)instance;
            return that.CanGoBack;
        }
        private object get_26_BaseViewModel_CanGoForward(object instance)
        {
            var that = (global::OnJamendo.ViewModel.BaseViewModel)instance;
            return that.CanGoForward;
        }
        private object get_27_BaseViewModel_RefreshPage(object instance)
        {
            var that = (global::OnJamendo.ViewModel.BaseViewModel)instance;
            return that.RefreshPage;
        }
        private object get_28_MainPageViewModel_TopTracks(object instance)
        {
            var that = (global::OnJamendo.ViewModel.MainPageViewModel)instance;
            return that.TopTracks;
        }
        private void set_28_MainPageViewModel_TopTracks(object instance, object Value)
        {
            var that = (global::OnJamendo.ViewModel.MainPageViewModel)instance;
            that.TopTracks = (global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Track>)Value;
        }
        private object get_29_MainPageViewModel_TopAlbums(object instance)
        {
            var that = (global::OnJamendo.ViewModel.MainPageViewModel)instance;
            return that.TopAlbums;
        }
        private void set_29_MainPageViewModel_TopAlbums(object instance, object Value)
        {
            var that = (global::OnJamendo.ViewModel.MainPageViewModel)instance;
            that.TopAlbums = (global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.Album>)Value;
        }
        private object get_30_Album_Artist_Name(object instance)
        {
            var that = (global::OnJamendo.Model.Album)instance;
            return that.Artist_Name;
        }
        private void set_30_Album_Artist_Name(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.Album)instance;
            that.Artist_Name = (global::System.String)Value;
        }
        private object get_31_Album_Genre(object instance)
        {
            var that = (global::OnJamendo.Model.Album)instance;
            return that.Genre;
        }
        private void set_31_Album_Genre(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.Album)instance;
            that.Genre = (global::System.String)Value;
        }
        private object get_32_MusicItem_TrackCount(object instance)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            return that.TrackCount;
        }
        private void set_32_MusicItem_TrackCount(object instance, object Value)
        {
            var that = (global::OnJamendo.Model.MusicItem)instance;
            that.TrackCount = (global::System.Int32)Value;
        }
        private object get_33_MainPageViewModel_TopPlayLists(object instance)
        {
            var that = (global::OnJamendo.ViewModel.MainPageViewModel)instance;
            return that.TopPlayLists;
        }
        private void set_33_MainPageViewModel_TopPlayLists(object instance, object Value)
        {
            var that = (global::OnJamendo.ViewModel.MainPageViewModel)instance;
            that.TopPlayLists = (global::System.Collections.ObjectModel.ObservableCollection<global::OnJamendo.Model.PlayList>)Value;
        }
        private object get_34_MainPageViewModel_TrackSelectedCommand(object instance)
        {
            var that = (global::OnJamendo.ViewModel.MainPageViewModel)instance;
            return that.TrackSelectedCommand;
        }
        private object get_35_ItemClickCommandBehavior_Command(object instance)
        {
            return global::OnJamendo.Common.ItemClickCommandBehavior.GetCommand((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_35_ItemClickCommandBehavior_Command(object instance, object Value)
        {
            global::OnJamendo.Common.ItemClickCommandBehavior.SetCommand((global::Windows.UI.Xaml.DependencyObject)instance, (System.Windows.Input.ICommand)Value);
                    }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember xamlMember = null;
            global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "OnJamendo.Controls.Downloader.DownloadList":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Controls.Downloader");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "DownloadList", "System.Collections.Generic.IList<OnJamendo.Model.Track>");
                xamlMember.Getter = get_0_Downloader_DownloadList;
                xamlMember.Setter = set_0_Downloader_DownloadList;
                break;
            case "OnJamendo.Model.Track.Album_Name":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.Track");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Album_Name", "String");
                xamlMember.Getter = get_1_Track_Album_Name;
                xamlMember.Setter = set_1_Track_Album_Name;
                break;
            case "OnJamendo.Model.Track.Album_Image":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.Track");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Album_Image", "String");
                xamlMember.Getter = get_2_Track_Album_Image;
                xamlMember.Setter = set_2_Track_Album_Image;
                break;
            case "OnJamendo.Model.Track.Artist_Name":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.Track");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Artist_Name", "String");
                xamlMember.Getter = get_3_Track_Artist_Name;
                xamlMember.Setter = set_3_Track_Artist_Name;
                break;
            case "OnJamendo.Model.Track.Text":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.Track");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_4_Track_Text;
                xamlMember.Setter = set_4_Track_Text;
                break;
            case "OnJamendo.Model.Track.Stream":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.Track");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Stream", "String");
                xamlMember.Getter = get_5_Track_Stream;
                xamlMember.Setter = set_5_Track_Stream;
                break;
            case "OnJamendo.Model.Track.TrackCount":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.Track");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "TrackCount", "Int32");
                xamlMember.Getter = get_6_Track_TrackCount;
                xamlMember.Setter = set_6_Track_TrackCount;
                break;
            case "OnJamendo.Model.MusicItem.Id":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.MusicItem");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_7_MusicItem_Id;
                xamlMember.Setter = set_7_MusicItem_Id;
                break;
            case "OnJamendo.Model.MusicItem.Name":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.MusicItem");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_8_MusicItem_Name;
                xamlMember.Setter = set_8_MusicItem_Name;
                break;
            case "OnJamendo.Model.MusicItem.Image":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.MusicItem");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Image", "String");
                xamlMember.Getter = get_9_MusicItem_Image;
                xamlMember.Setter = set_9_MusicItem_Image;
                break;
            case "OnJamendo.Model.MusicItem.Duration":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.MusicItem");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Duration", "Int32");
                xamlMember.Getter = get_10_MusicItem_Duration;
                xamlMember.Setter = set_10_MusicItem_Duration;
                break;
            case "OnJamendo.Model.MusicItem.Url":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.MusicItem");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Url", "String");
                xamlMember.Getter = get_11_MusicItem_Url;
                xamlMember.Setter = set_11_MusicItem_Url;
                break;
            case "OnJamendo.Controls.Player.Track":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Controls.Player");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Track", "OnJamendo.Model.Track");
                xamlMember.Getter = get_12_Player_Track;
                xamlMember.Setter = set_12_Player_Track;
                break;
            case "OnJamendo.Controls.Player.PlayListSource":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Controls.Player");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "PlayListSource", "System.Collections.Generic.IList<OnJamendo.Model.Track>");
                xamlMember.Getter = get_13_Player_PlayListSource;
                xamlMember.Setter = set_13_Player_PlayListSource;
                break;
            case "OnJamendo.Controls.Player.PlayListIndex":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Controls.Player");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "PlayListIndex", "Int32");
                xamlMember.Getter = get_14_Player_PlayListIndex;
                xamlMember.Setter = set_14_Player_PlayListIndex;
                break;
            case "OnJamendo.View.BaseView.DataContextChangedWatcher":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.View.BaseView");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "DataContextChangedWatcher", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_BaseView_DataContextChangedWatcher;
                xamlMember.Setter = set_15_BaseView_DataContextChangedWatcher;
                break;
            case "OnJamendo.ViewModel.PlayerPageViewModel.AllTracks":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.PlayerPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "AllTracks", "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Track>");
                xamlMember.Getter = get_16_PlayerPageViewModel_AllTracks;
                xamlMember.Setter = set_16_PlayerPageViewModel_AllTracks;
                break;
            case "OnJamendo.ViewModel.PlayerPageViewModel.DownloadTracks":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.PlayerPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "DownloadTracks", "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.DownloadTrack>");
                xamlMember.Getter = get_17_PlayerPageViewModel_DownloadTracks;
                xamlMember.Setter = set_17_PlayerPageViewModel_DownloadTracks;
                break;
            case "OnJamendo.Model.DownloadTrack.TotalBytesToRecive":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.DownloadTrack");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "TotalBytesToRecive", "UInt64");
                xamlMember.Getter = get_18_DownloadTrack_TotalBytesToRecive;
                xamlMember.Setter = set_18_DownloadTrack_TotalBytesToRecive;
                break;
            case "OnJamendo.Model.DownloadTrack.RecivedBytes":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.DownloadTrack");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "RecivedBytes", "UInt64");
                xamlMember.Getter = get_19_DownloadTrack_RecivedBytes;
                xamlMember.Setter = set_19_DownloadTrack_RecivedBytes;
                break;
            case "OnJamendo.Model.DownloadTrack.StorageFile":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.DownloadTrack");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "StorageFile", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_20_DownloadTrack_StorageFile;
                xamlMember.Setter = set_20_DownloadTrack_StorageFile;
                break;
            case "OnJamendo.ViewModel.PlayerPageViewModel.CurrentTrack":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.PlayerPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "CurrentTrack", "OnJamendo.Model.Track");
                xamlMember.Getter = get_21_PlayerPageViewModel_CurrentTrack;
                xamlMember.Setter = set_21_PlayerPageViewModel_CurrentTrack;
                break;
            case "OnJamendo.ViewModel.PlayerPageViewModel.DownloadTrack":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.PlayerPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "DownloadTrack", "OnJamendo.Common.RelayCommand<OnJamendo.Model.Track>");
                xamlMember.Getter = get_22_PlayerPageViewModel_DownloadTrack;
                xamlMember.SetIsReadOnly();
                break;
            case "OnJamendo.ViewModel.PlayerPageViewModel.TrackDownloadService":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.PlayerPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "TrackDownloadService", "OnJamendo.Service.DownloadService");
                xamlMember.Getter = get_23_PlayerPageViewModel_TrackDownloadService;
                xamlMember.SetIsReadOnly();
                break;
            case "OnJamendo.ViewModel.BaseViewModel.NavigationService":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.BaseViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "NavigationService", "OnJamendo.Service.INavigationService");
                xamlMember.Getter = get_24_BaseViewModel_NavigationService;
                xamlMember.Setter = set_24_BaseViewModel_NavigationService;
                break;
            case "OnJamendo.ViewModel.BaseViewModel.CanGoBack":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.BaseViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "CanGoBack", "Boolean");
                xamlMember.Getter = get_25_BaseViewModel_CanGoBack;
                xamlMember.SetIsReadOnly();
                break;
            case "OnJamendo.ViewModel.BaseViewModel.CanGoForward":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.BaseViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "CanGoForward", "Boolean");
                xamlMember.Getter = get_26_BaseViewModel_CanGoForward;
                xamlMember.SetIsReadOnly();
                break;
            case "OnJamendo.ViewModel.BaseViewModel.RefreshPage":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.BaseViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "RefreshPage", "OnJamendo.Common.RelayCommand");
                xamlMember.Getter = get_27_BaseViewModel_RefreshPage;
                xamlMember.SetIsReadOnly();
                break;
            case "OnJamendo.ViewModel.MainPageViewModel.TopTracks":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.MainPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "TopTracks", "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Track>");
                xamlMember.Getter = get_28_MainPageViewModel_TopTracks;
                xamlMember.Setter = set_28_MainPageViewModel_TopTracks;
                break;
            case "OnJamendo.ViewModel.MainPageViewModel.TopAlbums":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.MainPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "TopAlbums", "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.Album>");
                xamlMember.Getter = get_29_MainPageViewModel_TopAlbums;
                xamlMember.Setter = set_29_MainPageViewModel_TopAlbums;
                break;
            case "OnJamendo.Model.Album.Artist_Name":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.Album");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Artist_Name", "String");
                xamlMember.Getter = get_30_Album_Artist_Name;
                xamlMember.Setter = set_30_Album_Artist_Name;
                break;
            case "OnJamendo.Model.Album.Genre":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.Album");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Genre", "String");
                xamlMember.Getter = get_31_Album_Genre;
                xamlMember.Setter = set_31_Album_Genre;
                break;
            case "OnJamendo.Model.MusicItem.TrackCount":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Model.MusicItem");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "TrackCount", "Int32");
                xamlMember.Getter = get_32_MusicItem_TrackCount;
                xamlMember.Setter = set_32_MusicItem_TrackCount;
                break;
            case "OnJamendo.ViewModel.MainPageViewModel.TopPlayLists":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.MainPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "TopPlayLists", "System.Collections.ObjectModel.ObservableCollection<OnJamendo.Model.PlayList>");
                xamlMember.Getter = get_33_MainPageViewModel_TopPlayLists;
                xamlMember.Setter = set_33_MainPageViewModel_TopPlayLists;
                break;
            case "OnJamendo.ViewModel.MainPageViewModel.TrackSelectedCommand":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.ViewModel.MainPageViewModel");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "TrackSelectedCommand", "OnJamendo.Common.RelayCommand<OnJamendo.Model.MusicItem>");
                xamlMember.Getter = get_34_MainPageViewModel_TrackSelectedCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "OnJamendo.Common.ItemClickCommandBehavior.Command":
                userType = (global::OnJamendo.OnJamendo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OnJamendo.Common.ItemClickCommandBehavior");
                xamlMember = new global::OnJamendo.OnJamendo_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_35_ItemClickCommandBehavior_Command;
                xamlMember.Setter = set_35_ItemClickCommandBehavior_Command;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::OnJamendo.OnJamendo_XamlTypeInfo.XamlSystemBaseType
    {
        global::OnJamendo.OnJamendo_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::OnJamendo.OnJamendo_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::OnJamendo.OnJamendo_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::OnJamendo.OnJamendo_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


